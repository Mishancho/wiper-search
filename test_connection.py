#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ä–µ–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""

import os
import gspread
from google.oauth2.service_account import Credentials
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets API
SCOPES = [
    'https://www.googleapis.com/auth/spreadsheets',
    'https://www.googleapis.com/auth/drive'
]

def test_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ"""
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü–µ")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
    if not os.path.exists('service-account-key.json'):
        print("‚ùå –§–∞–π–ª service-account-key.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üìù –°–∫–∞—á–∞–π—Ç–µ –µ–≥–æ –∏–∑ Google Cloud Console –∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞")
        return False
    
    if not os.path.exists('.env'):
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üìù –ó–∞–ø—É—Å—Ç–∏—Ç–µ python setup_real_table.py –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        return False
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Google Sheets
        credentials = Credentials.from_service_account_file(
            'service-account-key.json', 
            scopes=SCOPES
        )
        
        client = gspread.authorize(credentials)
        
        # –ü–æ–ª—É—á–∞–µ–º ID —Ç–∞–±–ª–∏—Ü—ã
        spreadsheet_id = os.getenv('GOOGLE_SHEETS_ID')
        if not spreadsheet_id:
            print("‚ùå GOOGLE_SHEETS_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
            return False
        
        print(f"üìä –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ: {spreadsheet_id}")
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        spreadsheet = client.open_by_key(spreadsheet_id)
        print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ –æ—Ç–∫—Ä—ã—Ç–∞: {spreadsheet.title}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–∏—Å—Ç—ã
        worksheets = spreadsheet.worksheets()
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ –ª–∏—Å—Ç–æ–≤: {len(worksheets)}")
        
        total_rows = 0
        sample_data = []
        
        for worksheet in worksheets:
            try:
                data = worksheet.get_all_values()
                valid_rows = 0
                
                print(f"\nüìÑ –õ–∏—Å—Ç: {worksheet.title}")
                print(f"   –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {len(data)}")
                
                for i, row in enumerate(data):
                    if len(row) >= 2 and row[0].strip() and row[1].strip():
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                        if not any(keyword in row[0].lower() for keyword in ['wipers', 'front', 'back']):
                            valid_rows += 1
                            if len(sample_data) < 5:  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–µ 5 –ø—Ä–∏–º–µ—Ä–æ–≤
                                sample_data.append({
                                    'sheet': worksheet.title,
                                    'main_part': row[0].strip(),
                                    'alt_parts': row[1].strip()
                                })
                
                print(f"   –í–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {valid_rows}")
                total_rows += valid_rows
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–∏—Å—Ç–∞ {worksheet.title}: {e}")
        
        print(f"\nüìä –ò—Ç–æ–≥–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {total_rows}")
        
        if sample_data:
            print("\nüìù –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö:")
            for i, item in enumerate(sample_data, 1):
                print(f"   {i}. {item['main_part']} ‚Üí {item['alt_parts']}")
        
        print(f"\n‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ —Å {total_rows} –∑–∞–ø–∏—Å—è–º–∏")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        print("\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID —Ç–∞–±–ª–∏—Ü—ã –≤ .env")
        print("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ service account –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ Google Sheets API –≤–∫–ª—é—á–µ–Ω")
        return False

def test_search_functionality():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞"""
    
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞")
    print("=" * 50)
    
    try:
        from app import get_google_sheets_data, normalize_data, search_analogs
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        raw_data = get_google_sheets_data()
        if not raw_data:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã")
            return False
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
        normalized_data = normalize_data(raw_data)
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω—ã: {len(normalized_data)} –∑–∞–ø–∏—Å–µ–π")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        test_queries = ['6R1998002', '5E1', '6v6955425', '5JA']
        
        for query in test_queries:
            results = search_analogs(query, normalized_data)
            if results:
                print(f"‚úÖ –ü–æ–∏—Å–∫ '{query}': –Ω–∞–π–¥–µ–Ω–æ {len(results)} –≥—Ä—É–ø–ø")
                for result in results:
                    print(f"   {result['main_part']} ‚Üí {', '.join(result['all_parts'])}")
            else:
                print(f"‚ùå –ü–æ–∏—Å–∫ '{query}': –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –∞–Ω–∞–ª–æ–≥–æ–≤ —â—ë—Ç–æ–∫")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if test_connection():
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        test_search_functionality()
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")
        print("üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –∑–∞–ø—É—Å–∫—É: python run.py")
    else:
        print("\n‚ùå –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
